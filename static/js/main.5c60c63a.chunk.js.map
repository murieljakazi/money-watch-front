{"version":3,"sources":["components/AccountOverview/contexts/AccountContext.js","components/Transactions/Input/transactionOptions.js","components/Transactions/Display/TransactionDetails.js","components/Transactions/Display/TransactionDisplay.js","components/Transactions/Input/TransactionInput.js","components/AccountOverview/AccountOverview.js","components/SideMenu.js","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["AccountContext","createContext","options","makeStyles","root","width","accordion","margin","amount","memo","addButton","marginLeft","withStyles","TableRow","TableCell","useStyles","table","minWidth","tableRow","StyledTableCell","theme","head","backgroundColor","palette","common","black","color","white","body","fontSize","StyledTableRow","TransactionDisplay","useContext","displayTransactions","refreshTransactions","setDisplayTransactions","getAccountOverview","useState","edit","setEdit","type","updatedTransaction","setUpdatedTransaction","showEditFields","transactionId","console","log","handleUpdateData","e","target","name","value","discardEdit","classes","useEffect","TableContainer","component","Paper","Table","className","TableHead","TableBody","map","transaction","index","TextField","size","clsx","startAdornment","InputAdornment","position","endAdornment","select","label","defaultValue","placeholder","variant","onChange","option","MenuItem","shrink","IconButton","onClick","url","process","axios","put","then","editTransaction","id","date","align","TransactionInput","props","newTransaction","setNewTransaction","getCurrentDate","addTransaction","a","post","tempDate","Date","getFullYear","getMonth","getDate","setTransactionInfo","Accordion","AccordionSummary","expandIcon","Typography","AccordionDetails","number","parseInt","Button","marginTop","content","display","flexDirection","labels","positive","fontWeight","negative","transactionCount","AccountOverview","accountInfo","setAccountInfo","get","res","data","Card","CardContent","balance","spending","deposits","Provider","sideMenu","left","height","appTitle","sup","Header","AppBar","Toolbar","Grid","container","item","sm","appMain","paddingLeft","App","CssBaseline","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5c60c63a.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nconst AccountContext = createContext(null);\n\nexport default AccountContext;\n","const options = [\n    'POS (Point of sale)',\n    'Deposit',\n    'Cash Withdrawal',\n    'Transfer (in)',\n    'Transfer (out)'\n]\n\nexport default options;","import axios from 'axios';\nimport React, { useState, useContext} from 'react';\nimport clsx from 'clsx';\n\nimport options from '../Input/transactionOptions';\nimport AccountContext from '../../AccountOverview/contexts/AccountContext';\nimport { withStyles, makeStyles, TableRow, TableCell, IconButton, TextField, InputAdornment, MenuItem,  } from '@material-ui/core';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport CloseIcon from '@material-ui/icons/Close';\nimport DoneIcon from '@material-ui/icons/Done';\n\nconst useStyles = makeStyles({\n    root: {\n        width: 200\n    },\n    accordion: {\n        margin: '1em 0',\n        width: '100%'\n    },\n    margin: {\n        margin: '8px'\n    },\n    amount: {\n        width: 180\n    }, \n    memo: {\n        width: 450\n    },\n    addButton: {\n        marginLeft: 100\n    }\n});\n\n\nconst StyledTableRow = withStyles(() => ({\n\n}))(TableRow);\n\nconst StyledTableCell = withStyles(() => ({\n\n}))(TableCell);\n\nconst TransactionDetails = (props) => {\n    const classes = useStyles();\n    const { getAccountOverview } = useContext(AccountContext);\n    const [edit, setEdit] = useState(false);\n    const [updatedTransaction, setUpdatedTransaction] = useState({\n        amount: props.transaction.amount,\n        memo: props.transaction.memo,\n        type: props.transaction.type\n    });\n\n    const { transaction, refreshTransactions } = props;\n    const transactionId = transaction.id;\n\n    const showEditFields = () => {\n        setEdit(true);\n        console.log(transactionId);\n        console.log(updatedTransaction);\n    };\n\n    const handleUpdateData = (e) => {\n        setUpdatedTransaction({...updatedTransaction, [e.target.name]: e.target.value});\n    };\n\n    const discardEdit = () => {\n        setEdit(false);\n    };\n\n    const editTransaction = (transactionId) => {\n        const url = `${process.env.REACT_APP_API_SERVER}/users/1/accounts/1/transactions/${transactionId}`;\n        axios\n          .put(url, updatedTransaction)\n          .then(refreshTransactions)\n          .then(() => getAccountOverview());\n        setEdit(false);\n    };\n\n    const deleteTransaction = (transactionId) => {\n        console.log(transactionId);\n        const url = `${process.env.REACT_APP_API_SERVER}/users/1/accounts/1/transactions/${transactionId}`;\n        axios\n          .delete(url)\n          .then(res => console.log(\"toto\", res.data))\n          .then(refreshTransactions)\n          .then(() => getAccountOverview());\n    };\n\n    console.log(updatedTransaction);\n\n    return (\n        <div>\n        {!edit && (\n            <StyledTableRow key={transaction.memo}>\n              <StyledTableCell>{transaction.amount}</StyledTableCell>\n              <StyledTableCell>{transaction.memo}</StyledTableCell>\n              <StyledTableCell>{transaction.date}</StyledTableCell>\n              <StyledTableCell align=\"right\">\n              <IconButton onClick={showEditFields}>\n                <EditIcon />\n              </IconButton>\n              <IconButton onClick={() => deleteTransaction(transactionId)}>\n                <DeleteIcon />\n              </IconButton>\n              </StyledTableCell>\n            </StyledTableRow>\n            // <div className=\"display-container\">\n            // <div>\n            //   <p>{transaction.amount}</p>\n            // </div>\n            // <div>\n            //   <p>{transaction.memo}</p>\n            // </div>\n            // <div>\n            //   <p>{transaction.date}</p>\n            // </div>\n            // <div className=\"action-buttons\">\n            //   <button onClick={showEditFields}>Edit</button>\n            //   <button onClick={() => deleteTransaction(transactionId)}>Delete</button>\n            // </div>\n            // </div>\n            )\n        }\n        {edit && (\n            <form>\n                <div>\n                    <TextField\n                        className={classes.margin}\n                        name=\"amount\"\n                        size=\"small\"\n                        className={clsx(classes.amount, classes.margin)}\n                        label=\"Amount\"\n                        defaultValue={transaction.amount}\n                        placeholder={transaction.amount}\n                        variant=\"outlined\"\n                        InputProps={{\n                            startAdornment: <InputAdornment position=\"start\">€</InputAdornment>,\n                            endAdornment: <InputAdornment position=\"end\">.00</InputAdornment>\n                          }}\n                        onChange={handleUpdateData}\n                    />\n                    <TextField\n                        name=\"type\"\n                        select\n                        size=\"small\"\n                        className={clsx(classes.margin, classes.root)}\n                        label=\"Transaction Type\"\n                        defaultValue={transaction.type}\n                        placeholder={transaction.type}\n                        variant=\"outlined\"\n                        onChange={handleUpdateData}\n                        >\n                          {options.map((option, index) => (\n                            <MenuItem name={option} value={option} key={index}>{option}</MenuItem>\n                          ))}\n                    </TextField>\n                    <TextField\n                        className={classes.margin}\n                        name=\"memo\"\n                        label=\"Memo\"\n                        defaultValue={transaction.memo}\n                        placeholder={transaction.memo}\n                        size=\"small\"\n                        className={clsx(classes.memo, classes.margin)}\n                        variant=\"outlined\"\n                        InputLabelProps={{\n                            shrink: true,\n                          }}\n                        onChange={handleUpdateData}\n                    />\n                    <IconButton onClick={discardEdit}>\n                        <CloseIcon />\n                    </IconButton>\n                    <IconButton onClick={() => editTransaction(transactionId)}>\n                        <DoneIcon />\n                    </IconButton>\n                </div>\n            </form>\n\n            //   <div className=\"edit-input-container\">\n            //     <div className=\"edit-input\">\n            //       <label>Amount</label>\n            //       <input placeholder={transaction.amount} name=\"amount\" type=\"text\" onChange={handleUpdateData}></input>\n            //     </div>\n            //     <div className=\"edit-input\">\n            //       <label>Transaction Type</label>\n            //       <select name=\"type\" onChange={handleUpdateData}>\n            //         <option defaultValue={transaction.type} disabled hidden></option>\n            //         {options.map((option, i) => {\n            //           return <option key={i}>{option}</option>\n            //         })}\n            //       </select>\n            //     </div>\n            //     <div className=\"edit-input\">\n            //       <label>Memo</label>\n            //       <input placeholder={transaction.memo} name=\"memo\" type=\"text\" onChange={handleUpdateData}></input>\n            //     </div>\n            //     <div>\n            //       <button onClick={discardEdit}>X</button>\n            //       <button onClick={() => editTransaction(transactionId)}>O</button>\n            //     </div>\n            //   </div>\n            )}\n        </div>\n    )\n}\n\nexport default TransactionDetails;\n","import React, {useEffect, useContext, useState} from 'react';\nimport axios from 'axios';\nimport clsx from 'clsx';\n\nimport AccountContext from '../../AccountOverview/contexts/AccountContext';\nimport options from '../Input/transactionOptions';\nimport './TransactionDisplay.css'\nimport TransactionDetails from './TransactionDetails';\nimport { Table, TableContainer, Paper, TableHead, TableRow, TableCell, makeStyles, withStyles, TableBody, IconButton, InputAdornment, TextField, MenuItem } from '@material-ui/core';\nimport EditIcon from '@material-ui/icons/Edit';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport CloseIcon from '@material-ui/icons/Close';\nimport DoneIcon from '@material-ui/icons/Done';\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 700,\n  },\n  tableRow: {\n    width: 700\n  }\n});\n\nconst StyledTableCell = withStyles((theme) => ({\n  head: {\n    backgroundColor: theme.palette.common.black,\n    color: theme.palette.common.white\n  },\n  body: {\n    fontSize: 14,\n  },\n}))(TableCell);\n\nconst StyledTableRow = withStyles(() => ({\n\n}))(TableRow);\n\n\n\nconst TransactionDisplay = () => {\n  \n  const { displayTransactions, setDisplayTransactions, refreshTransactions, getAccountOverview } = useContext(AccountContext);\n  const [edit, setEdit] = useState(false);\n  const [updatedTransaction, setUpdatedTransaction] = useState({\n    amount: displayTransactions.amount,\n    memo: displayTransactions.memo,\n    type: displayTransactions.type\n  });\n\n  const showEditFields = (transactionId) => {\n    setEdit(true);\n    console.log(\"hello\");\n  };\n\n  const handleUpdateData = (e) => {\n    setUpdatedTransaction({...updatedTransaction, [e.target.name]: e.target.value});\n  };\n\n  const discardEdit = () => {\n    setEdit(false);\n  };\n\n  const editTransaction = (transactionId) => {\n    const url = `${process.env.REACT_APP_API_SERVER}/users/1/accounts/1/transactions/${transactionId}`;\n    axios\n      .put(url, updatedTransaction)\n      .then(refreshTransactions)\n      .then(() => getAccountOverview());\n    setEdit(false);\n  };\n    \n  const classes = useStyles();\n    \n    \n  useEffect(() => {\n      refreshTransactions();\n  }, []);\n\n  console.log(displayTransactions);\n\n  return (\n    <div>\n      <TableContainer component={Paper}>\n        <Table className={classes.table}>\n          <TableHead>\n            <TableRow className={classes.tableRow}>\n              <StyledTableCell>Amount </StyledTableCell>\n              <StyledTableCell>Memo </StyledTableCell>\n              <StyledTableCell>Date </StyledTableCell>\n              <StyledTableCell></StyledTableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {displayTransactions.map((transaction, index) => {\n              return (\n                  edit \n                  ?\n                <div>\n                    <TextField\n                        className={classes.margin}\n                        name=\"amount\"\n                        size=\"small\"\n                        className={clsx(classes.amount, classes.margin)}\n                        label=\"Amount\"\n                        defaultValue={transaction.amount}\n                        placeholder={transaction.amount}\n                        variant=\"outlined\"\n                        InputProps={{\n                            startAdornment: <InputAdornment position=\"start\">€</InputAdornment>,\n                            endAdornment: <InputAdornment position=\"end\">.00</InputAdornment>\n                          }}\n                        onChange={handleUpdateData}\n                    />\n                    <TextField\n                        name=\"type\"\n                        select\n                        size=\"small\"\n                        className={clsx(classes.margin, classes.root)}\n                        label=\"Transaction Type\"\n                        defaultValue={transaction.type}\n                        placeholder={transaction.type}\n                        variant=\"outlined\"\n                        onChange={handleUpdateData}\n                        >\n                          {options.map((option, index) => (\n                            <MenuItem name={option} value={option} key={index}>{option}</MenuItem>\n                          ))}\n                    </TextField>\n                    <TextField\n                        className={classes.margin}\n                        name=\"memo\"\n                        label=\"Memo\"\n                        defaultValue={transaction.memo}\n                        placeholder={transaction.memo}\n                        size=\"small\"\n                        className={clsx(classes.memo, classes.margin)}\n                        variant=\"outlined\"\n                        InputLabelProps={{\n                            shrink: true,\n                          }}\n                        onChange={handleUpdateData}\n                    />\n                    <IconButton onClick={discardEdit}>\n                        <CloseIcon />\n                    </IconButton>\n                    <IconButton onClick={() => editTransaction(transaction.id)}>\n                        <DoneIcon />\n                    </IconButton>\n                </div>\n                  :\n                    <StyledTableRow key={index}>\n                      <StyledTableCell>{transaction.amount}</StyledTableCell>\n                      <StyledTableCell>{transaction.memo}</StyledTableCell>\n                      <StyledTableCell>{transaction.date}</StyledTableCell>\n                      <StyledTableCell align=\"right\">\n                        <IconButton onClick={showEditFields}>\n                          <EditIcon />\n                        </IconButton>\n                        <IconButton >\n                          <DeleteIcon />\n                        </IconButton>\n                      </StyledTableCell>\n                    </StyledTableRow>\n\n                  \n                )\n              })\n            }\n                {/* <TransactionDetails\n                transaction={transaction}\n                key={transaction.memo}\n                refreshTransactions={() => refreshTransactions() } /> */}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </div>\n  )\n}\n\nexport default TransactionDisplay;\n","import React, {useState, useEffect, useContext} from 'react';\nimport axios from 'axios';\nimport clsx from 'clsx';\n\nimport AccountContext from '../../AccountOverview/contexts/AccountContext'\nimport TransactionDisplay from '../Display/TransactionDisplay';\nimport options from './transactionOptions';\n\nimport { Accordion, AccordionDetails, AccordionSummary, Typography, TextField, makeStyles, InputAdornment, MenuItem, Button } from '@material-ui/core';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport './TransactionInput.css'\n\nconst useStyles = makeStyles({\n    root: {\n        width: 200\n    },\n    accordion: {\n        margin: '1em 0',\n        width: '100%'\n    },\n    margin: {\n        margin: '8px'\n    },\n    amount: {\n        width: 180\n    }, \n    memo: {\n        width: 450\n    },\n    addButton: {\n        marginLeft: 100\n    }\n});\n\nconst TransactionInput = (props) => {\n    const classes = useStyles();\n    const { getAccountOverview, refreshTransactions } = useContext(AccountContext);\n    const [newTransaction, setNewTransaction] = useState({\n        amount: null,\n        memo: \"\",\n        type: \"\",\n        date: \"\"\n    });\n\n    useEffect(() => {\n        setNewTransaction({...newTransaction, date: getCurrentDate()});\n    }, [])\n\n    const addTransaction = async (e) => {\n        const url = `${process.env.REACT_APP_API_SERVER}/users/1/accounts/1/transactions`;\n        await axios\n                .post(url, newTransaction)\n                .then(() => refreshTransactions())\n                .then(() => getAccountOverview());\n    };\n\n    const getCurrentDate = () => {\n        const tempDate = new Date();\n        const year = tempDate.getFullYear();\n        const tempMonth = tempDate.getMonth();\n        const month = tempMonth + 1;\n        const day = tempDate.getDate();\n        const transactionDate = year + \"-\" + month + \"-\" + day;\n        return transactionDate;\n    }\n\n    const setTransactionInfo = (e) => {\n        setNewTransaction({ ...newTransaction, [e.target.name]: e.target.value })\n    };\n\n    const setTransactionAmount = (e) => {\n        const number = parseInt(e.target.value);\n        setNewTransaction({ ...newTransaction, amount: number});\n    }\n\n    console.log(newTransaction);\n    return (\n        <div className=\"input-container\">\n            <Accordion className={classes.accordion}>\n                <AccordionSummary\n                expandIcon={<ExpandMoreIcon/>}\n                >\n                    <Typography>Add Transaction</Typography>\n                </AccordionSummary>\n                <AccordionDetails>\n                    <form className=\"transaction-form\">\n                        <div>\n                        <TextField\n                        className={classes.margin}\n                        name=\"amount\"\n                        size=\"small\"\n                        className={clsx(classes.amount, classes.margin)}\n                        label=\"Amount\"\n                        defaultValue=\"\"\n                        variant=\"outlined\"\n                        InputProps={{\n                            startAdornment: <InputAdornment position=\"start\">€</InputAdornment>,\n                            endAdornment: <InputAdornment position=\"end\">.00</InputAdornment>\n                          }}\n                        onChange={setTransactionAmount}\n                        />\n                        <TextField\n                        name=\"type\"\n                        select\n                        size=\"small\"\n                        className={clsx(classes.margin, classes.root)}\n                        label=\"Transaction Type\"\n                        defaultValue=\"\"\n                        variant=\"outlined\"\n                        onChange={setTransactionInfo}\n                        >\n                          {options.map((option, index) => (\n                            <MenuItem name={option} value={option} key={index}>{option}</MenuItem>\n                          ))}\n                        </TextField>\n                        <TextField\n                        className={classes.margin}\n                        name=\"memo\"\n                        label=\"Memo\"\n                        placeholder=\"Enter transaction details\"\n                        size=\"small\"\n                        className={clsx(classes.memo, classes.margin)}\n                        variant=\"outlined\"\n                        InputLabelProps={{\n                            shrink: true,\n                          }}\n                        onChange={setTransactionInfo}\n                        />\n                        <Button\n                        className={clsx(classes.margin, classes.addButton)}\n                        onClick={addTransaction}\n                        >\n                            Add\n                        </Button>\n                        </div>\n                    </form>\n\n                </AccordionDetails>\n            </Accordion>\n            <TransactionDisplay />\n        </div>\n\n    )\n}\n\nexport default TransactionInput;\n","import { Card, CardContent, makeStyles, Typography } from '@material-ui/core';\nimport axios from 'axios';\nimport React, { useState, useEffect } from 'react';\nimport TransactionDisplay from '../Transactions/Display/TransactionDisplay';\n\nimport TransactionInput from '../Transactions/Input/TransactionInput'\n\nimport './AccountOverview.css'\nimport AccountContext from './contexts/AccountContext';\n\nconst useStyles = makeStyles({\n    root: {\n        width: 250,\n        marginTop: 15\n    },\n    content: {\n        display: 'flex',\n        flexDirection: 'column'\n    },\n    labels: {\n        margin: 5\n    }, \n    positive: {\n        color: 'green',\n        fontWeight: 'bold'  \n    },\n    negative: {\n        color: 'red',\n        fontWeight: 'bold'\n    }, \n    transactionCount : {\n        color: 'blue',\n        fontWeight: 'bold'\n    }\n});\n\nconst AccountOverview = () => {\n    const [displayTransactions, setDisplayTransactions] = useState([]);\n    const [accountInfo, setAccountInfo] = useState([]);\n\n    const getAccountOverview = () => {\n        const url = `${process.env.REACT_APP_API_SERVER}/users/1/accounts/1`;\n        axios\n          .get(url)\n          .then(res => setAccountInfo(res.data));\n    };\n\n    const refreshTransactions = () => {\n        const url = `${process.env.REACT_APP_API_SERVER}/users/1/accounts/1/transactions`;\n        axios\n          .get(url)\n          .then(console.log('Getting transactions...'))\n          .then(res => setDisplayTransactions(res.data));\n    };\n\n    useEffect(() => {\n        getAccountOverview()\n    }, []);\n\n    const classes = useStyles();\n\n    return (\n        <div className=\"account-summary\">\n\n        <div className=\"overview-container\">\n            <Card className={classes.root}>\n                <CardContent className={classes.content}>\n                    <Typography className={classes.labels} component=\"h2\">Current Balance</Typography>\n                    <Typography className={`${classes.labels} ${classes.positive}`}>{accountInfo.balance}</Typography>\n                </CardContent>\n            </Card>\n            <Card className={classes.root}>\n                <CardContent className={classes.content}>\n                    <Typography className={classes.labels}>Monthly Spending</Typography>\n                    <Typography className={`${classes.labels} ${classes.negative}`}>{accountInfo.spending}</Typography>\n                </CardContent>\n            </Card>\n            <Card className={classes.root}>\n                <CardContent className={classes.content}>\n                    <Typography className={classes.labels}>Deposits</Typography>\n                    <Typography className={`${classes.labels} ${classes.positive}`}>{accountInfo.deposits}</Typography>\n                </CardContent>\n            </Card>\n            <Card className={classes.root}>\n                <CardContent className={classes.content}>\n                    <Typography className={classes.labels}>Monthly Transactions</Typography>\n                    <Typography className={`${classes.labels} ${classes.transactionCount}`}>{accountInfo.transactionCount}</Typography>\n                </CardContent>\n            </Card>\n        </div>\n        <AccountContext.Provider\n        value={{\n            getAccountOverview,\n            accountInfo,\n            setAccountInfo,\n            displayTransactions,\n            setDisplayTransactions,\n            refreshTransactions\n        }}\n        >\n        <TransactionInput />\n        </AccountContext.Provider>\n        </div>\n        \n    )\n}\n\nexport default AccountOverview;\n","import React from 'react';\nimport { withStyles } from '@material-ui/core';\n\nconst style = {\n    sideMenu: {\n        display: 'flex',\n        flexDirection: 'column',\n        position: 'absolute',\n        left: '0px',\n        width: '320px',\n        height: '130vh',\n        backgroundColor: '#253053'\n    },\n    appTitle: {\n        color: '#FFF',\n        margin: '10px 0 0 70px'\n    },\n    sup: {\n        fontSize: '14px'\n    }\n}\n\nfunction SideMenu(props) {\n\n    const { classes } = props;\n\n    return (\n        <div className={classes.sideMenu}>\n            <h1 className={classes.appTitle}>MoneyWatch <sup className={classes.sup}>beta</sup></h1>\n        </div>\n    )\n}\n\nexport default withStyles(style)(SideMenu);\n","import React from 'react';\nimport { makeStyles, AppBar, Toolbar, Grid, IconButton } from '@material-ui/core';\nimport PowerSettingsNewIcon from '@material-ui/icons/PowerSettingsNew';\n\nconst useStyles = makeStyles( theme => ({\n    root:{\n    backgroundColor:'#FFF'\n    }\n}));\n\nexport default function Header() {\n    const classes = useStyles();\n\n    return (\n        <AppBar position=\"static\" className={classes.root}>\n            <Toolbar>\n                <Grid container>\n                    <Grid item></Grid>\n                    <Grid item sm></Grid>\n                    <Grid item>\n                        <IconButton>\n                            <PowerSettingsNewIcon />\n                        </IconButton>\n                    </Grid>\n                </Grid>\n\n            </Toolbar>\n        </AppBar>\n    )\n}\n","import AccountOverview from './components/AccountOverview/AccountOverview';\nimport SideMenu from './components/SideMenu';\nimport Header from './components/Header'\nimport { CssBaseline, makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles({\n  appMain: {\n    paddingLeft: '320px',\n    width: '100%'\n  }\n})\n\nfunction App() {\n  const classes = useStyles();\n  return (\n    <>\n    <SideMenu />\n    <div className={classes.appMain}>\n      <Header />\n      <AccountOverview />\n    </div>\n    <CssBaseline />\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}